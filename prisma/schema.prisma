// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
//   output = "../src/prisma-generated/docs"
// }

// generator dbml {
//   provider   = "prisma-dbml-generator"
//   output     = "../src/prisma-generated/dbml"
//   outputName = "schema.dbml"
// }

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/prisma-generated/"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  fileNamingStyle                 = "camel"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  id    Int     @id @default(autoincrement())
  name  String?
  email String?
  phone String?
  trips Trip[]
}

model Trip {
  id       Int     @id @default(autoincrement())
  steps    Step[]
  client   Client? @relation(fields: [clientId], references: [id])
  clientId Int?
}

model Step {
  id               Int                @id @default(autoincrement())
  trip             Trip?              @relation(fields: [tripId], references: [id])
  tripId           Int?
  startedAt        DateTime
  endedAt          DateTime
  from             String
  to               String
  distance         Float?
  commentary       String?
  passengersCount  Int?
  driverAndVehicle DriverAndVehicle[]
}

model DriverAndVehicle {
  id        Int      @id @default(autoincrement())
  step      Step?    @relation(fields: [stepId], references: [id])
  stepId    Int?
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  driver    Driver?  @relation(fields: [driverId], references: [id])
  vehicleId Int
  driverId  Int
}

model Warehouse {
  id       Int       @id @default(autoincrement())
  adress   String
  vehicles Vehicle[]
  driver   Driver[]
}

model Vehicle {
  id               Int                @id @default(autoincrement())
  model            String
  capacity         Int
  warehouse        Warehouse?         @relation(fields: [warehouseId], references: [id])
  warehouseId      Int?
  driverAndVehicle DriverAndVehicle[]
}

model Driver {
  id               Int                @id @default(autoincrement())
  name             String
  status           Status             @default(ACTIVE)
  warehouse        Warehouse?         @relation(fields: [warehouseId], references: [id])
  warehouseId      Int
  driverAndVehicle DriverAndVehicle[]
}

// Les enums n'existent pas avec SQLITE
enum Status {
  ACTIVE
  INACTIVE
}
